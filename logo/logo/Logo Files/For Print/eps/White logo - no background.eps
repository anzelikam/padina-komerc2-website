%!PS-Adobe-3.0 EPSF-3.0
%Produced by poppler pdftops version: 22.05.0 (http://poppler.freedesktop.org)
%%Creator: Chromium
%%LanguageLevel: 3
%%DocumentSuppliedResources: (atend)
%%BoundingBox: 0 0 2406 2382
%%HiResBoundingBox: 0 0 2405.04 2382
%%DocumentSuppliedResources: (atend)
%%EndComments
%%BeginProlog
%%BeginResource: procset xpdf 3.00 0
%%Copyright: Copyright 1996-2011, 2022 Glyph & Cog, LLC
/xpdf 75 dict def xpdf begin
% PDF special state
/pdfDictSize 15 def
/pdfSetup {
  /setpagedevice where {
    pop 2 dict begin
      /Policies 1 dict dup begin /PageSize 6 def end def
      { /Duplex true def } if
    currentdict end setpagedevice
  } {
    pop
  } ifelse
} def
/pdfSetupPaper {
  % Change paper size, but only if different from previous paper size otherwise
  % duplex fails. PLRM specifies a tolerance of 5 pts when matching paper size
  % so we use the same when checking if the size changes.
  /setpagedevice where {
    pop currentpagedevice
    /PageSize known {
      2 copy
      currentpagedevice /PageSize get aload pop
      exch 4 1 roll
      sub abs 5 gt
      3 1 roll
      sub abs 5 gt
      or
    } {
      true
    } ifelse
    {
      2 array astore
      2 dict begin
        /PageSize exch def
        /ImagingBBox null def
      currentdict end
      setpagedevice
    } {
      pop pop
    } ifelse
  } {
    pop
  } ifelse
} def
/pdfStartPage {
  pdfDictSize dict begin
  /pdfFillCS [] def
  /pdfFillXform {} def
  /pdfStrokeCS [] def
  /pdfStrokeXform {} def
  /pdfFill [0] def
  /pdfStroke [0] def
  /pdfFillOP false def
  /pdfStrokeOP false def
  /pdfOPM false def
  /pdfLastFill false def
  /pdfLastStroke false def
  /pdfTextMat [1 0 0 1 0 0] def
  /pdfFontSize 0 def
  /pdfCharSpacing 0 def
  /pdfTextRender 0 def
  /pdfPatternCS false def
  /pdfTextRise 0 def
  /pdfWordSpacing 0 def
  /pdfHorizScaling 1 def
  /pdfTextClipPath [] def
} def
/pdfEndPage { end } def
% PDF color state
/opm { dup /pdfOPM exch def
      /setoverprintmode where{pop setoverprintmode}{pop}ifelse  } def
/cs { /pdfFillXform exch def dup /pdfFillCS exch def
      setcolorspace } def
/CS { /pdfStrokeXform exch def dup /pdfStrokeCS exch def
      setcolorspace } def
/sc { pdfLastFill not { pdfFillCS setcolorspace } if
      dup /pdfFill exch def aload pop pdfFillXform setcolor
     /pdfLastFill true def /pdfLastStroke false def } def
/SC { pdfLastStroke not { pdfStrokeCS setcolorspace } if
      dup /pdfStroke exch def aload pop pdfStrokeXform setcolor
     /pdfLastStroke true def /pdfLastFill false def } def
/op { /pdfFillOP exch def
      pdfLastFill { pdfFillOP setoverprint } if } def
/OP { /pdfStrokeOP exch def
      pdfLastStroke { pdfStrokeOP setoverprint } if } def
/fCol {
  pdfLastFill not {
    pdfFillCS setcolorspace
    pdfFill aload pop pdfFillXform setcolor
    pdfFillOP setoverprint
    /pdfLastFill true def /pdfLastStroke false def
  } if
} def
/sCol {
  pdfLastStroke not {
    pdfStrokeCS setcolorspace
    pdfStroke aload pop pdfStrokeXform setcolor
    pdfStrokeOP setoverprint
    /pdfLastStroke true def /pdfLastFill false def
  } if
} def
% build a font
/pdfMakeFont {
  4 3 roll findfont
  4 2 roll matrix scale makefont
  dup length dict begin
    { 1 index /FID ne { def } { pop pop } ifelse } forall
    /Encoding exch def
    currentdict
  end
  definefont pop
} def
/pdfMakeFont16 {
  exch findfont
  dup length dict begin
    { 1 index /FID ne { def } { pop pop } ifelse } forall
    /WMode exch def
    currentdict
  end
  definefont pop
} def
/pdfMakeFont16L3 {
  1 index /CIDFont resourcestatus {
    pop pop 1 index /CIDFont findresource /CIDFontType known
  } {
    false
  } ifelse
  {
    0 eq { /Identity-H } { /Identity-V } ifelse
    exch 1 array astore composefont pop
  } {
    pdfMakeFont16
  } ifelse
} def
% graphics state operators
/q { gsave pdfDictSize dict begin } def
/Q {
  end grestore
  /pdfLastFill where {
    pop
    pdfLastFill {
      pdfFillOP setoverprint
    } {
      pdfStrokeOP setoverprint
    } ifelse
  } if
  /pdfOPM where {
    pop
    pdfOPM /setoverprintmode where{pop setoverprintmode}{pop}ifelse 
  } if
} def
/cm { concat } def
/d { setdash } def
/i { setflat } def
/j { setlinejoin } def
/J { setlinecap } def
/M { setmiterlimit } def
/w { setlinewidth } def
% path segment operators
/m { moveto } def
/l { lineto } def
/c { curveto } def
/re { 4 2 roll moveto 1 index 0 rlineto 0 exch rlineto
      neg 0 rlineto closepath } def
/h { closepath } def
% path painting operators
/S { sCol stroke } def
/Sf { fCol stroke } def
/f { fCol fill } def
/f* { fCol eofill } def
% clipping operators
/W { clip newpath } def
/W* { eoclip newpath } def
/Ws { strokepath clip newpath } def
% text state operators
/Tc { /pdfCharSpacing exch def } def
/Tf { dup /pdfFontSize exch def
      dup pdfHorizScaling mul exch matrix scale
      pdfTextMat matrix concatmatrix dup 4 0 put dup 5 0 put
      exch findfont exch makefont setfont } def
/Tr { /pdfTextRender exch def } def
/Tp { /pdfPatternCS exch def } def
/Ts { /pdfTextRise exch def } def
/Tw { /pdfWordSpacing exch def } def
/Tz { /pdfHorizScaling exch def } def
% text positioning operators
/Td { pdfTextMat transform moveto } def
/Tm { /pdfTextMat exch def } def
% text string operators
/xyshow where {
  pop
  /xyshow2 {
    dup length array
    0 2 2 index length 1 sub {
      2 index 1 index 2 copy get 3 1 roll 1 add get
      pdfTextMat dtransform
      4 2 roll 2 copy 6 5 roll put 1 add 3 1 roll dup 4 2 roll put
    } for
    exch pop
    xyshow
  } def
}{
  /xyshow2 {
    currentfont /FontType get 0 eq {
      0 2 3 index length 1 sub {
        currentpoint 4 index 3 index 2 getinterval show moveto
        2 copy get 2 index 3 2 roll 1 add get
        pdfTextMat dtransform rmoveto
      } for
    } {
      0 1 3 index length 1 sub {
        currentpoint 4 index 3 index 1 getinterval show moveto
        2 copy 2 mul get 2 index 3 2 roll 2 mul 1 add get
        pdfTextMat dtransform rmoveto
      } for
    } ifelse
    pop pop
  } def
} ifelse
/cshow where {
  pop
  /xycp {
    0 3 2 roll
    {
      pop pop currentpoint 3 2 roll
      1 string dup 0 4 3 roll put false charpath moveto
      2 copy get 2 index 2 index 1 add get
      pdfTextMat dtransform rmoveto
      2 add
    } exch cshow
    pop pop
  } def
}{
  /xycp {
    currentfont /FontType get 0 eq {
      0 2 3 index length 1 sub {
        currentpoint 4 index 3 index 2 getinterval false charpath moveto
        2 copy get 2 index 3 2 roll 1 add get
        pdfTextMat dtransform rmoveto
      } for
    } {
      0 1 3 index length 1 sub {
        currentpoint 4 index 3 index 1 getinterval false charpath moveto
        2 copy 2 mul get 2 index 3 2 roll 2 mul 1 add get
        pdfTextMat dtransform rmoveto
      } for
    } ifelse
    pop pop
  } def
} ifelse
/Tj {
  fCol
  0 pdfTextRise pdfTextMat dtransform rmoveto
  currentpoint 4 2 roll
  pdfTextRender 1 and 0 eq {
    2 copy xyshow2
  } if
  pdfTextRender 3 and dup 1 eq exch 2 eq or {
    3 index 3 index moveto
    2 copy
    currentfont /FontType get 3 eq { fCol } { sCol } ifelse
    xycp currentpoint stroke moveto
  } if
  pdfTextRender 4 and 0 ne {
    4 2 roll moveto xycp
    /pdfTextClipPath [ pdfTextClipPath aload pop
      {/moveto cvx}
      {/lineto cvx}
      {/curveto cvx}
      {/closepath cvx}
    pathforall ] def
    currentpoint newpath moveto
  } {
    pop pop pop pop
  } ifelse
  0 pdfTextRise neg pdfTextMat dtransform rmoveto
} def
/TJm { 0.001 mul pdfFontSize mul pdfHorizScaling mul neg 0
       pdfTextMat dtransform rmoveto } def
/TJmV { 0.001 mul pdfFontSize mul neg 0 exch
        pdfTextMat dtransform rmoveto } def
/Tclip { pdfTextClipPath cvx exec clip newpath
         /pdfTextClipPath [] def } def
/Tclip* { pdfTextClipPath cvx exec eoclip newpath
         /pdfTextClipPath [] def } def
% Level 2/3 image operators
/pdfImBuf 100 string def
/pdfImStr {
  2 copy exch length lt {
    2 copy get exch 1 add exch
  } {
    ()
  } ifelse
} def
/skipEOD {
  { currentfile pdfImBuf readline
    not { pop exit } if
    (%-EOD-) eq { exit } if } loop
} def
/pdfIm { image skipEOD } def
/pdfMask {
  /ReusableStreamDecode filter
  skipEOD
  /maskStream exch def
} def
/pdfMaskEnd { maskStream closefile } def
/pdfMaskInit {
  /maskArray exch def
  /maskIdx 0 def
} def
/pdfMaskSrc {
  maskIdx maskArray length lt {
    maskArray maskIdx get
    /maskIdx maskIdx 1 add def
  } {
    ()
  } ifelse
} def
/pdfImM { fCol imagemask skipEOD } def
/pr { 2 index 2 index 3 2 roll putinterval 4 add } def
/pdfImClip {
  gsave
  0 2 4 index length 1 sub {
    dup 4 index exch 2 copy
    get 5 index div put
    1 add 3 index exch 2 copy
    get 3 index div put
  } for
  pop pop rectclip
} def
/pdfImClipEnd { grestore } def
% shading operators
/colordelta {
  false 0 1 3 index length 1 sub {
    dup 4 index exch get 3 index 3 2 roll get sub abs 0.004 gt {
      pop true
    } if
  } for
  exch pop exch pop
} def
/funcCol { func n array astore } def
/funcSH {
  dup 0 eq {
    true
  } {
    dup 6 eq {
      false
    } {
      4 index 4 index funcCol dup
      6 index 4 index funcCol dup
      3 1 roll colordelta 3 1 roll
      5 index 5 index funcCol dup
      3 1 roll colordelta 3 1 roll
      6 index 8 index funcCol dup
      3 1 roll colordelta 3 1 roll
      colordelta or or or
    } ifelse
  } ifelse
  {
    1 add
    4 index 3 index add 0.5 mul exch 4 index 3 index add 0.5 mul exch
    6 index 6 index 4 index 4 index 4 index funcSH
    2 index 6 index 6 index 4 index 4 index funcSH
    6 index 2 index 4 index 6 index 4 index funcSH
    5 3 roll 3 2 roll funcSH pop pop
  } {
    pop 3 index 2 index add 0.5 mul 3 index  2 index add 0.5 mul
    funcCol sc
    dup 4 index exch mat transform m
    3 index 3 index mat transform l
    1 index 3 index mat transform l
    mat transform l pop pop h f*
  } ifelse
} def
/axialCol {
  dup 0 lt {
    pop t0
  } {
    dup 1 gt {
      pop t1
    } {
      dt mul t0 add
    } ifelse
  } ifelse
  func n array astore
} def
/axialSH {
  dup 0 eq {
    true
  } {
    dup 8 eq {
      false
    } {
      2 index axialCol 2 index axialCol colordelta
    } ifelse
  } ifelse
  {
    1 add 3 1 roll 2 copy add 0.5 mul
    dup 4 3 roll exch 4 index axialSH
    exch 3 2 roll axialSH
  } {
    pop 2 copy add 0.5 mul
    axialCol sc
    exch dup dx mul x0 add exch dy mul y0 add
    3 2 roll dup dx mul x0 add exch dy mul y0 add
    dx abs dy abs ge {
      2 copy yMin sub dy mul dx div add yMin m
      yMax sub dy mul dx div add yMax l
      2 copy yMax sub dy mul dx div add yMax l
      yMin sub dy mul dx div add yMin l
      h f*
    } {
      exch 2 copy xMin sub dx mul dy div add xMin exch m
      xMax sub dx mul dy div add xMax exch l
      exch 2 copy xMax sub dx mul dy div add xMax exch l
      xMin sub dx mul dy div add xMin exch l
      h f*
    } ifelse
  } ifelse
} def
/radialCol {
  dup t0 lt {
    pop t0
  } {
    dup t1 gt {
      pop t1
    } if
  } ifelse
  func n array astore
} def
/radialSH {
  dup 0 eq {
    true
  } {
    dup 8 eq {
      false
    } {
      2 index dt mul t0 add radialCol
      2 index dt mul t0 add radialCol colordelta
    } ifelse
  } ifelse
  {
    1 add 3 1 roll 2 copy add 0.5 mul
    dup 4 3 roll exch 4 index radialSH
    exch 3 2 roll radialSH
  } {
    pop 2 copy add 0.5 mul dt mul t0 add
    radialCol sc
    encl {
      exch dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      0 360 arc h
      dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      360 0 arcn h f
    } {
      2 copy
      dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      a1 a2 arcn
      dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      a2 a1 arcn h
      dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      a1 a2 arc
      dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      a2 a1 arc h f
    } ifelse
  } ifelse
} def
end
%%EndResource
/CIDInit /ProcSet findresource begin
10 dict begin
  begincmap
  /CMapType 1 def
  /CMapName /Identity-H def
  /CIDSystemInfo 3 dict dup begin
    /Registry (Adobe) def
    /Ordering (Identity) def
    /Supplement 0 def
  end def
  1 begincodespacerange
    <0000> <ffff>
  endcodespacerange
  0 usefont
  1 begincidrange
    <0000> <ffff> 0
  endcidrange
  endcmap
  currentdict CMapName exch /CMap defineresource pop
end
10 dict begin
  begincmap
  /CMapType 1 def
  /CMapName /Identity-V def
  /CIDSystemInfo 3 dict dup begin
    /Registry (Adobe) def
    /Ordering (Identity) def
    /Supplement 0 def
  end def
  /WMode 1 def
  1 begincodespacerange
    <0000> <ffff>
  endcodespacerange
  0 usefont
  1 begincidrange
    <0000> <ffff> 0
  endcidrange
  endcmap
  currentdict CMapName exch /CMap defineresource pop
end
end
%%EndProlog
%%BeginSetup
xpdf begin
%%EndSetup
pdfStartPage
%%EndPageSetup
[] 0 d
1 i
0 j
0 J
10 M
1 w
/DeviceGray {} cs
[0] sc
/DeviceGray {} CS
[0] SC
false op
false OP
{} settransfer
0 0 2405.04 2382 re
W
q
[0.24 0 0 -0.24 0 2382] cm
q
0 0 10020.833 9923.9678 re
W*
q
[32.325268 0 0 32.325596 323.25269 323.26083] cm
/DeviceRGB {} CS
[1 1 1] SC
/DeviceRGB {} cs
[1 1 1] sc
10 0 m
280 0 l
280.16367 0 280.32721 0.004015 280.49066 0.012045 c
280.65411 0.020076 280.81729 0.032111 280.98016 0.048153 c
281.14304 0.064194 281.30542 0.084221 281.46732 0.108235 c
281.62918 0.132248 281.79037 0.160219 281.95087 0.192147 c
282.11136 0.224075 282.271 0.259922 282.42978 0.299687 c
282.58853 0.339453 282.74622 0.383089 282.90283 0.430597 c
283.05942 0.478104 283.21475 0.529425 283.36884 0.584559 c
283.52295 0.639694 283.6756 0.698576 283.82678 0.761205 c
283.978 0.823834 284.12756 0.890134 284.27548 0.960107 c
284.42343 1.03008 284.56958 1.10364 284.71396 1.180787 c
284.85828 1.257935 285.00064 1.338577 285.14099 1.422714 c
285.28134 1.50685 285.41959 1.59438 285.55566 1.685304 c
285.69174 1.776227 285.8255 1.870434 285.95694 1.967925 c
286.08841 2.065415 286.21741 2.166072 286.3439 2.269896 c
286.4704 2.373719 286.5943 2.480583 286.71555 2.590489 c
286.83682 2.700394 286.95532 2.813209 287.07104 2.928932 c
287.1868 3.044655 287.29959 3.163148 287.40948 3.28441 c
287.51941 3.405672 287.62628 3.529558 287.7301 3.656067 c
287.83392 3.782576 287.93457 3.911555 288.03204 4.043006 c
288.12955 4.174457 288.22375 4.308221 288.31467 4.444297 c
288.40558 4.580373 288.49313 4.718598 288.57727 4.858972 c
288.66141 4.999346 288.74203 5.141699 288.81921 5.286032 c
288.89636 5.430365 288.96991 5.576504 289.03989 5.724448 c
289.10986 5.872393 289.17615 6.021965 289.23877 6.173165 c
289.30139 6.324365 289.36026 6.47701 289.41537 6.631101 c
289.47052 6.785191 289.52188 6.940542 289.5694 7.097153 c
289.61691 7.253763 289.66052 7.411445 289.70029 7.570198 c
289.74005 7.72895 289.77591 7.888583 289.80783 8.049096 c
289.83975 8.209609 289.86774 8.370809 289.89175 8.532695 c
289.91577 8.694581 289.93579 8.856959 289.95187 9.019829 c
289.9679 9.182698 289.97992 9.345862 289.98798 9.509323 c
289.996 9.672784 290 9.836343 290 10 c
290 277 l
290 277.16367 289.996 277.32721 289.98798 277.49066 c
289.97992 277.65414 289.9679 277.81729 289.95187 277.98016 c
289.93579 278.14304 289.91577 278.30539 289.89175 278.46725 c
289.86774 278.62915 289.83975 278.79034 289.80783 278.95087 c
289.77591 279.11139 289.74005 279.27103 289.70029 279.42978 c
289.66052 279.58856 289.61691 279.74625 289.5694 279.90283 c
289.52188 280.05942 289.47052 280.21478 289.41537 280.36887 c
289.36026 280.52295 289.30139 280.6756 289.23877 280.82681 c
289.17615 280.978 289.10986 281.12756 289.03989 281.27554 c
288.96991 281.42349 288.89636 281.56964 288.81921 281.71396 c
288.74203 281.85828 288.66141 282.00064 288.57727 282.14099 c
288.49313 282.28137 288.40558 282.41959 288.31467 282.55566 c
288.22375 282.69174 288.12955 282.8255 288.03204 282.95694 c
287.93457 283.08838 287.83392 283.21738 287.7301 283.3439 c
287.62628 283.4704 287.51941 283.5943 287.40948 283.71555 c
287.29959 283.83679 287.1868 283.95529 287.07104 284.07104 c
286.95532 284.18674 286.83682 284.29956 286.71555 284.40952 c
286.5943 284.51941 286.4704 284.62625 286.3439 284.7301 c
286.21741 284.83392 286.08841 284.93457 285.95694 285.03207 c
285.8255 285.12955 285.69174 285.22375 285.55566 285.31467 c
285.41959 285.40561 285.28134 285.49316 285.14099 285.5773 c
285.00064 285.66144 284.85828 285.74207 284.71396 285.81921 c
284.56958 285.89633 284.42343 285.96991 284.27548 286.03989 c
284.12756 286.10983 283.978 286.17612 283.82678 286.23877 c
283.6756 286.30142 283.52295 286.36029 283.36884 286.41541 c
283.21475 286.47055 283.05942 286.52188 282.90283 286.5694 c
282.74622 286.61691 282.58853 286.66052 282.42978 286.70029 c
282.271 286.74005 282.11136 286.77588 281.95087 286.80783 c
281.79037 286.83975 281.62918 286.86771 281.46732 286.89172 c
281.30542 286.91574 281.14304 286.93576 280.98016 286.95184 c
280.81729 286.96786 280.65411 286.97992 280.49066 286.98795 c
280.32721 286.99597 280.16367 287 280 287 c
10 287 l
9.836343 287 9.672784 286.99597 9.509323 286.98795 c
9.345862 286.97992 9.182698 286.96786 9.019829 286.95184 c
8.856959 286.93576 8.694581 286.91574 8.532695 286.89175 c
8.370809 286.86774 8.209609 286.83975 8.049096 286.80783 c
7.888583 286.77588 7.72895 286.74002 7.570198 286.70026 c
7.411445 286.66052 7.253763 286.61691 7.097153 286.5694 c
6.940542 286.52188 6.785191 286.47055 6.6311 286.41541 c
6.47701 286.36029 6.324365 286.30142 6.173165 286.23877 c
6.021965 286.17612 5.872393 286.10983 5.724448 286.03989 c
5.576504 285.96991 5.430366 285.89633 5.286033 285.81921 c
5.141699 285.74207 4.999346 285.66144 4.858972 285.5773 c
4.718598 285.49316 4.580373 285.40561 4.444297 285.31467 c
4.308221 285.22375 4.174457 285.12955 4.043006 285.03207 c
3.911555 284.93457 3.782576 284.83392 3.656067 284.7301 c
3.529558 284.62625 3.405672 284.51941 3.28441 284.40952 c
3.163148 284.29956 3.044655 284.18674 2.928932 284.07104 c
2.813209 283.95529 2.700394 283.83679 2.590489 283.71555 c
2.480583 283.5943 2.373719 283.4704 2.269896 283.3439 c
2.166072 283.21738 2.065415 283.08838 1.967925 282.95694 c
1.870434 282.8255 1.776227 282.69174 1.685304 282.55566 c
1.594381 282.41959 1.50685 282.28137 1.422714 282.14099 c
1.338577 282.00064 1.257935 281.85828 1.180787 281.71396 c
1.10364 281.56964 1.03008 281.42349 0.960107 281.27554 c
0.890134 281.12756 0.823834 280.978 0.761205 280.82681 c
0.698576 280.6756 0.639694 280.52295 0.584559 280.36887 c
0.529425 280.21478 0.478104 280.05945 0.430597 279.90286 c
0.383089 279.74625 0.339453 279.58856 0.299687 279.42981 c
0.259922 279.27103 0.224075 279.11139 0.192147 278.95087 c
0.160219 278.79034 0.132248 278.62915 0.108235 278.46725 c
0.084221 278.30539 0.064194 278.14304 0.048153 277.98016 c
0.032111 277.81729 0.020076 277.65414 0.012045 277.49066 c
0.004015 277.32721 0 277.16367 0 277 c
0 10 l
0 9.836343 0.004015 9.672784 0.012045 9.509323 c
0.020076 9.345862 0.032111 9.182698 0.048153 9.019829 c
0.064194 8.856959 0.084221 8.694581 0.108235 8.532695 c
0.132248 8.370809 0.160219 8.209609 0.192147 8.049096 c
0.224075 7.888583 0.259922 7.72895 0.299687 7.570198 c
0.339453 7.411445 0.383089 7.253763 0.430597 7.097153 c
0.478104 6.940542 0.529425 6.785191 0.584559 6.6311 c
0.639694 6.47701 0.698576 6.324365 0.761205 6.173165 c
0.823834 6.021965 0.890134 5.872393 0.960107 5.724448 c
1.03008 5.576504 1.10364 5.430366 1.180787 5.286033 c
1.257935 5.141699 1.338577 4.999346 1.422714 4.858972 c
1.50685 4.718598 1.59438 4.580373 1.685304 4.444297 c
1.776227 4.308221 1.870434 4.174457 1.967925 4.043006 c
2.065415 3.911555 2.166072 3.782576 2.269896 3.656067 c
2.373719 3.529558 2.480583 3.405672 2.590489 3.28441 c
2.700394 3.163148 2.813209 3.044655 2.928932 2.928932 c
3.044655 2.813209 3.163148 2.700394 3.28441 2.590489 c
3.405672 2.480583 3.529558 2.373719 3.656067 2.269896 c
3.782576 2.166072 3.911555 2.065415 4.043006 1.967925 c
4.174457 1.870434 4.308221 1.776227 4.444297 1.685304 c
4.580373 1.594381 4.718598 1.50685 4.858972 1.422714 c
4.999346 1.338577 5.141699 1.257935 5.286032 1.180787 c
5.430365 1.10364 5.576504 1.03008 5.724448 0.960107 c
5.872393 0.890134 6.021965 0.823834 6.173165 0.761205 c
6.324365 0.698576 6.47701 0.639694 6.631101 0.584559 c
6.785191 0.529425 6.940542 0.478104 7.097153 0.430597 c
7.253763 0.383089 7.411445 0.339453 7.570198 0.299687 c
7.72895 0.259922 7.888583 0.224075 8.049096 0.192147 c
8.209609 0.160219 8.370809 0.132248 8.532695 0.108235 c
8.694581 0.084221 8.856959 0.064194 9.019829 0.048153 c
9.182698 0.032111 9.345862 0.020076 9.509323 0.012045 c
9.672784 0.004015 9.836343 0 10 0 c
h
f
Q
q
[47.769432 0 0 47.769913 2638.1025 633.35486] cm
94.890999 53.251999 m
94.876999 53.237999 l
87.111 44.959 l
79.544998 36.983002 l
79.701996 26.887001 l
79.845993 16.460001 l
79.845993 16.455002 l
79.85199 15.830002 79.349991 15.318002 78.724991 15.313002 c
78.699989 15.313002 l
66.339989 15.202002 l
65.651985 15.196002 65.08699 15.749001 65.080986 16.438002 c
65.080986 16.461002 l
65.035988 21.450003 l
59.412987 15.622003 l
56.794987 12.893003 54.142986 10.195003 51.501987 7.490003 c
51.496986 7.485003 51.484989 7.475003 51.480988 7.470003 c
50.896988 6.894003 49.956989 6.901003 49.378986 7.485003 c
49.372986 7.491003 l
38.310986 18.711002 l
27.315001 29.992001 l
5.377 52.615002 l
5.364 52.629002 l
5.137 52.862999 4.998 53.183998 5 53.536999 c
5.004 54.252998 5.589 54.830997 6.305 54.826 c
15.672 54.767002 l
15.866 91.923004 l
15.866 91.935005 l
15.869 92.502007 16.332001 92.961006 16.901001 92.958008 c
44.274002 92.824005 l
44.283001 92.824005 l
44.778 92.822006 45.178001 92.418007 45.174999 91.923004 c
45.066998 69.764999 l
55.903999 69.708 l
56.049 91.923004 l
56.049 91.931007 l
56.050999 92.24601 56.308998 92.501007 56.625 92.499008 c
83.987999 92.321007 l
83.993996 92.321007 l
84.211998 92.319008 84.388992 92.141006 84.386993 91.923004 c
84.136993 53.674004 l
94.583992 53.935005 l
94.687988 53.937004 94.790993 53.902004 94.871994 53.826004 c
95.035004 53.673 95.043999 53.416 94.890999 53.251999 c
h
83.988998 53.377998 m
83.908997 53.379997 83.841995 53.445 83.841995 53.524998 c
83.593994 91.522995 l
57.203995 91.350998 l
57.349998 68.980003 l
57.351997 68.582001 57.032997 68.255005 56.632999 68.253006 c
56.625 68.253006 l
44.275002 68.190002 l
43.842003 68.188004 43.488003 68.539001 43.486 68.971001 c
43.486 68.979004 l
43.377998 91.019997 l
17.941998 90.896996 l
18.136997 53.525997 l
18.140997 52.847996 17.594997 52.296997 16.915997 52.292995 c
16.901997 52.292995 l
9.41 52.244999 l
29.428999 32.065998 l
40.498001 20.852997 l
50.448002 10.656997 l
52.748001 12.987997 55.044003 15.322996 57.366001 17.631996 c
65.388 25.653996 l
65.409004 25.673996 l
65.652 25.914995 65.986008 26.062996 66.357002 26.059996 c
67.088005 26.052996 67.679001 25.453995 67.671005 24.719995 c
67.608002 17.707996 l
77.567001 17.618996 l
77.694 26.887997 l
77.856003 37.314995 l
77.856003 37.343994 l
77.860001 37.547993 77.940002 37.749992 78.096001 37.906994 c
86.168999 45.883995 l
93.601997 53.145996 l
83.988998 53.377998 l
h
f
Q
q
[44.073498 0 0 44.073944 848.11517 5217.4292] cm
15.68 11.44 m
18.720001 11.44 21.120001 12.26668 22.880001 13.92 c
24.640001 15.57332 25.52 17.799999 25.52 20.6 c
25.52 23.426701 24.640001 25.66 22.880001 27.299999 c
21.120001 28.939999 18.7332 29.759998 15.720001 29.759998 c
9.040001 29.759998 l
9.040001 40 l
2.760001 40 l
2.760001 11.440001 l
15.68 11.440001 l
15.68 11.44 l
h
14.04 24.879999 m
15.8533 24.879999 17.206699 24.546679 18.1 23.879999 c
18.993301 23.21332 19.440001 22.119999 19.440001 20.599998 c
19.440001 19.133299 19.006681 18.053299 18.140001 17.359999 c
17.273321 16.666698 15.920001 16.32 14.080002 16.32 c
9.040002 16.32 l
9.040002 24.880001 l
14.040002 24.880001 l
14.04 24.879999 l
h
47.967999 11.44 m
58.647999 40 l
52.127998 40 l
49.967999 33.639999 l
39.287998 33.639999 l
37.047997 40 l
30.687996 40 l
41.527996 11.440001 l
47.967995 11.440001 l
47.967999 11.44 l
h
44.647999 18.48 m
40.927998 28.959999 l
48.327999 28.959999 l
44.728001 18.48 l
44.647999 18.48 l
h
80.615997 11.44 m
84.669197 11.44 87.855995 12.693299 90.175995 15.2 c
92.495995 17.706699 93.655998 21.16 93.655998 25.559999 c
93.655998 30.119999 92.489296 33.666801 90.155998 36.200001 c
87.822701 38.7332 84.695999 40 80.776001 40 c
68.375999 40 l
68.375999 11.440001 l
80.615997 11.440001 l
80.615997 11.44 l
h
80.216003 34.720001 m
82.482704 34.720001 84.242805 33.97332 85.496002 32.48 c
86.749199 30.986679 87.375999 28.866699 87.375999 26.119999 c
87.375999 22.973299 86.702682 20.619999 85.356003 19.059999 c
84.009323 17.5 81.936005 16.719999 79.136002 16.719999 c
74.655998 16.719999 l
74.655998 34.720001 l
80.215996 34.720001 l
80.216003 34.720001 l
h
111.543999 11.44 m
111.543999 40 l
105.264 40 l
105.264 11.440001 l
111.543999 11.440001 l
111.543999 11.44 l
h
130.552002 11.44 m
142.472 30.599998 l
142.552002 30.599998 l
142.552002 11.439999 l
148.432007 11.439999 l
148.432007 40 l
142.152008 40 l
130.272003 20.879999 l
130.192001 20.879999 l
130.192001 40 l
124.312004 40 l
124.312004 11.440001 l
130.552002 11.440001 l
130.552002 11.44 l
h
175.44 11.44 m
186.12 40 l
179.59999 40 l
177.43999 33.639999 l
166.759979 33.639999 l
164.519974 40 l
158.159973 40 l
168.99997 11.440001 l
175.43997 11.440001 l
175.44 11.44 l
h
172.12 18.48 m
168.39999 28.959999 l
175.79999 28.959999 l
172.19998 18.48 l
172.11998 18.48 l
172.12 18.48 l
h
f
Q
q
[88.596634 0 0 88.597534 879.81995 7152.1904] cm
4.52 5.72 m
4.52 11.639999 l
10.1 5.719999 l
14.020001 5.719999 l
8.440001 11.359999 l
14.56 20 l
10.620001 20 l
6.320001 13.58 l
4.52 15.4 l
4.52 20 l
1.38 20 l
1.38 5.72 l
4.52 5.72 l
4.52 5.72 l
h
22.673 5.38 m
24.7796 5.38 26.4764 6.08 27.763 7.48 c
29.049601 8.88 29.693001 10.6934 29.693001 12.92 c
29.693001 15.0934 29.046341 16.8734 27.753 18.26 c
26.45966 19.646601 24.766399 20.34 22.673 20.34 c
20.566401 20.34 18.8696 19.64666 17.583 18.26 c
16.2964 16.873341 15.653 15.0934 15.653 12.92 c
15.653 10.7066 16.29966 8.896601 17.593 7.49 c
18.886341 6.0834 20.579601 5.38 22.673 5.38 c
h
18.792999 12.92 m
18.792999 14.360001 19.132978 15.5166 19.813 16.389999 c
20.493021 17.263399 21.446301 17.699999 22.673 17.699999 c
23.873001 17.699999 24.819601 17.269999 25.513 16.41 c
26.2064 15.550001 26.553001 14.3866 26.553001 12.92 c
26.553001 11.3867 26.209661 10.1866 25.523001 9.32 c
24.83634 8.4534 23.8797 8.02 22.653 8.02 c
21.452999 8.02 20.5096 8.45334 19.823 9.32 c
19.1364 10.18666 18.792999 11.3866 18.792999 12.92 c
h
36.706001 5.72 m
40.046001 15.539999 l
40.086002 15.539999 l
43.246002 5.719999 l
47.666 5.719999 l
47.666 20 l
44.726002 20 l
44.726002 9.88 l
44.686001 9.88 l
41.186001 20 l
38.765999 20 l
35.265999 9.98 l
35.225998 9.98 l
35.225998 20 l
32.285999 20 l
32.285999 5.72 l
36.706001 5.72 l
36.706001 5.72 l
h
61.558998 5.72 m
61.558998 8.36 l
54.018997 8.36 l
54.018997 11.42 l
60.938995 11.42 l
60.938995 13.860001 l
54.018997 13.860001 l
54.018997 17.360001 l
61.718998 17.360001 l
61.718998 20 l
50.878998 20 l
50.878998 5.72 l
61.558998 5.72 l
61.558998 5.72 l
h
71.991997 5.72 m
73.191994 5.72 74.188797 6.09 74.981995 6.83 c
75.775192 7.57 76.171997 8.5133 76.171997 9.66 c
76.171997 11.4467 75.418655 12.639999 73.911995 13.24 c
73.911995 13.28 l
74.418655 13.42666 74.815315 13.67 75.101997 14.01 c
75.38868 14.35 75.605316 14.74666 75.751976 15.200001 c
75.898636 15.653341 75.991974 16.380001 76.031975 17.380001 c
76.085312 18.686701 76.271973 19.560001 76.591972 20 c
73.451973 20 l
73.278633 19.559999 73.145294 18.733299 73.051956 17.52 c
72.945297 16.24 72.71196 15.4034 72.351959 15.01 c
71.991959 14.6166 71.405296 14.42 70.591957 14.42 c
67.431953 14.42 l
67.431953 20 l
64.291954 20 l
64.291954 5.72 l
71.991951 5.72 l
71.991997 5.72 l
h
70.891998 12.18 m
71.558655 12.18 72.082001 12.030001 72.461998 11.730001 c
72.841995 11.43 73.031998 10.900001 73.031998 10.14 c
73.031998 9.42 72.845337 8.91 72.472 8.610001 c
72.098663 8.310001 71.565323 8.160001 70.872002 8.160001 c
67.431999 8.160001 l
67.431999 12.18 l
70.891998 12.18 l
h
85.584999 5.38 m
87.251701 5.38 88.651596 5.85 89.784996 6.79 c
90.918396 7.73 91.571693 8.9734 91.744995 10.520001 c
88.704994 10.520001 l
88.598335 9.81334 88.244995 9.22 87.644997 8.740001 c
87.044998 8.260001 86.358299 8.020001 85.584999 8.020001 c
84.358299 8.020001 83.404999 8.46 82.724998 9.34 c
82.044998 10.22 81.705002 11.413401 81.705002 12.92 c
81.705002 14.3867 82.04834 15.55 82.735001 16.41 c
83.421661 17.27 84.371704 17.700001 85.584999 17.700001 c
86.491661 17.700001 87.224998 17.42334 87.784996 16.870001 c
88.344994 16.316662 88.691658 15.526701 88.824997 14.500001 c
91.864998 14.500001 l
91.704994 16.313301 91.055 17.740002 89.915001 18.780001 c
88.775002 19.82 87.331604 20.34 85.584999 20.34 c
83.4916 20.34 81.798401 19.65 80.504997 18.27 c
79.211594 16.890001 78.564995 15.106601 78.564995 12.92 c
78.564995 10.7066 79.204994 8.896601 80.484993 7.49 c
81.764992 6.0834 83.464996 5.38 85.584991 5.38 c
85.584999 5.38 l
h
f
Q
Q
Q
showpage
%%PageTrailer
pdfEndPage
%%Trailer
end
%%DocumentSuppliedResources:
%%EOF
